@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Html
@using SimpsonsSearch.searchEngine
@{
    ViewData["Title"] = "Results";
}

<div class="container">
    @await Html.PartialAsync("_searchForm", new SimpsonsSearch.Models.SearchformModel())
</div>
@{
    var siteCount = 0;
    var rank = (siteCount) * 10;
    var highlightedText = new HtmlString("");
}

<table id="results">
    <tbody>

    @foreach (var hit in Model.Hits)
    {
        
        {
            rank++;
            string text = @hit.Text;
            var searchQuery = Model.TopicName;
            string[] queryWords = searchQuery.Split(null);
            if (text.Contains(searchQuery))
            {
                highlightedText = new HtmlString(queryWords.Select(word => word.Trim()).Aggregate(text,
                    (current, pattern) =>
                        Regex.Replace(current,
                            pattern,
                            string.Format("<strong>{0}{1}</strong>",
                                "",
                                "$0"),
                            RegexOptions.IgnoreCase)));
            }
            else
            {
                highlightedText = new HtmlString(queryWords.Select(word => "\\b" + word.Trim() + "\\b")
                    .Aggregate(text, (current, pattern) =>
                        Regex.Replace(current,
                            pattern,
                            string.Format("<strong>{0}{1}</strong>",
                                "",
                                "$0"),
                            RegexOptions.IgnoreCase)));
            }
        }

        <tr class="Entry" id="@rank" style="display: none">
            <td class="firstRow">
                <strong>@rank</strong>
            </td>
            <td class="secondRow">
                <div class="Text">
                    @highlightedText
                </div>
                <div class="Meta-info">
                    <hr/>
                    <strong>@hit.Timestamp, Episode @hit.EpisodeInSeason "@hit.EpisodeName", Season @hit.Season</strong>
                </div>
                <div class="Meta-info">
                    <strong>@hit.Location</strong>
                </div>
            </td>
            <td class="thirdRow">
                <div class="feedback">

                    <button class="btn btn-warning logging" type="submit" value="@hit.Id" data-value="@Model.TopicName" id="1">+</button>
                    <button class="btn btn-warning logging" type="submit" value="@hit.Id" data-value="@Model.TopicName" id="0">-</button>

                </div>
            </td>
        </tr>
    }

    </tbody>
</table>
<div style="text-align: center">
    <button style="width: 200px; display: none" id="backwards" class="btn" onclick="backward()">Previous Results</button><a id="filler"> </a><button style="width: 200px" id="forwards" class="btn" onclick="forward()">Next Results</button>
</div>


@section Scripts {

    <script>
    
        var pageNR = 0;
        var maxRank = @rank;
    
        function forward() {
            pageNR++;
            var siteCount = pageNR * 10;
            
            try 
            {
                $('.Entry').css( "display", "none" );
            }
            catch (TypeError) 
            {
                          
            }
            
            if(pageNR > 0){
                $("#backwards").css( "display", "inline" );
            }
            
            for(var i = 0; i < 10; i++)
            {
                siteCount++;
                var entry = document.getElementById(siteCount);
                try {
                  entry.style.display = ""
                }
                catch (TypeError) {
                  
                }
            }        
            
            if(siteCount > 99)
            {
                $("#forwards").css("display", "none")
            }
            $('html, body').animate({ scrollTop: 0 }, 'slow');
        }
        
        function backward() {
            pageNR--;
            var siteCount = pageNR * 10;
            
            try 
            {
              $('.Entry').css( "display", "none" );
            }
            catch (TypeError) 
            {
              
            }
            
            
            if(pageNR === 0){
                $( "#backwards" ).css( "display", "none" );
            }
            
            if(siteCount < 99)
                        {
                            $("#forwards").css("display", "inline");
                        }
            
            for(var i = 0; i < 10; i++)
            {
                siteCount++;
                var entry = document.getElementById(siteCount);
                try {
                  entry.style.display = ""
                }
                catch (TypeError) {
                  
                }
            }
            $('html, body').animate({ scrollTop: 0 }, 'slow');
          
        }
        
        window.onload = function showFirstResults() {
            var pageNr = 0;
            for(var i = 0; i < 10; i++)
            {
                pageNr++;
                var entry = document.getElementById(pageNr);
                entry.style.display = ""
            }
        };
        
        $(document).on('click','.logging', 'button[id], button[data-value], button[value]', function (e) {
                e.stopPropagation();
                e.preventDefault();
                var id = $(this).attr("value");
                var TopicName = $(this).attr("data-value");
                var logType = $(this).attr("id");
            var url = "@Url.Action("LogResult")";
            $.post(url, { id: id, TopicName: TopicName, logType: logType }, function () {
                alert("Evaluation successful!")
                });
        });

    </script>
}